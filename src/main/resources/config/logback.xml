<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />
    <!-- 开发、测试环境 -->
    <springProfile name="dev,test">
        <!-- 定义日志存储的路径，不要配置相对路径 -->
        <property name="FILE_PATH" value="D:/logs/demo3/cccf.%d{yyyy-MM-dd}.%i.log" />
    </springProfile>
    <!-- 生產環境 -->
    <springProfile name="pro">
        <!-- 定义日志存储的路径，不要配置相对路径 -->
        <property name="FILE_PATH" value="/user/lib/cccf/logs/cccf.%d{yyyy-MM-dd}.%i.log" />
    </springProfile>
    <!-- 控制台输出日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 按照上面配置的LOG_PATTERN来打印日志 -->
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!--每天生成一个日志文件，保存30天的日志文件。rollingFile是用来切分文件的 -->
    <appender name="rollingFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${FILE_PATH}
            </fileNamePattern>
            <!-- keep 30 days' worth of history -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件的最大大小 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- project default level -->
    <logger name="com.hiynn.cccf" level="INFO" />

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="console" />
        <appender-ref ref="rollingFile" />
    </root>
    <!--DEBUG Level: 指出细粒度信息事件对调试应用程序是非常有帮助的,就是输出debug的信息.-->
    <!--INFO level: 表明消息在粗粒度级别上突出强调应用程序的运行过程,就是输出提示信息.-->
    <!--WARN level: 表明会出现潜在错误的情形,就是显示警告信息.-->
    <!--ERROR level: 指出虽然发生错误事件,但仍然不影响系统的继续运行.就是显示错误信息.-->
    <!--FATAL level: 指出每个严重的错误事件将会导致应用程序的退出.-->
    <!--ALL level: 是最低等级的,用于打开所有日志记录.-->
    <!--OFF level: 是最高等级的,用于关闭所有日志记录.-->
    <!-- 日志输出级别 -->
    <!--这五个级别是有顺序的，DEBUG < INFO < WARN < ERROR < FATAL，
    明白这一点很重要，这里Log4j有一个规则：假设设置了级别为P，
    如果发生了一个级别Q比P高，则可以启动，否则屏蔽掉。-->
</configuration>
